CREATE TABLE AUTHORS(
    AUTHOR_ID NUMBER(10) NOT NULL, 
    FIRST_NAME VARCHAR2(100) NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    BIRTH_DATE DATE NULL,
    DEATH_DATE DATE NULL,
    WHO_ADDED VARCHAR2(70) DEFAULT USER NOT NULL,
    WHEN_ADDED TIMESTAMP DEFAULT SYSDATE NOT NULL,
    WHO_LAST_MOD VARCHAR2(70) NULL,
    WHEN_LAST_MOD TIMESTAMP NULL,
    CONSTRAINT AUTHORS_PK PRIMARY KEY (AUTHOR_ID),
    CONSTRAINT AUTHORS_CK_1 CHECK (BIRTH_DATE < DEATH_DATE)
);
CREATE SEQUENCE AUTHORS_PK_SEQ;
CREATE OR REPLACE TRIGGER AUTHORS_PK_SEQ_TRIG
BEFORE INSERT ON AUTHORS FOR EACH ROW
BEGIN
    SELECT AUTHORS_PK_SEQ.NEXTVAL INTO :NEW.AUTHOR_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER AUTHORS_UPDATE_TRIG
BEFORE UPDATE ON AUTHORS FOR EACH ROW
BEGIN
    SELECT USER INTO :NEW.WHO_LAST_MOD FROM DUAL;
    SELECT SYSDATE INTO :NEW.WHEN_LAST_MOD FROM DUAL;
END;
/

CREATE TABLE TITLES(
    TITLE_ID NUMBER(10) NOT NULL,
    TITLE VARCHAR2(250) NOT NULL,
    PUB_DATE DATE NULL,
    AGE_LIMIT NUMBER(2) DEFAULT 7 NOT NULL,
    TITLE_DESCRIPTION BLOB NULL,
    WHO_ADDED VARCHAR2(70) DEFAULT USER NOT NULL,
    WHEN_ADDED TIMESTAMP DEFAULT SYSDATE NOT NULL,
    WHO_LAST_MOD VARCHAR2(70) NULL,
    WHEN_LAST_MOD TIMESTAMP NULL,
    CONSTRAINT TITLES_PK PRIMARY KEY (TITLE_ID),
    CONSTRAINT TITLES_CK_1 CHECK (AGE_LIMIT BETWEEN 7 AND 18)
);
CREATE SEQUENCE TITLES_PK_SEQ;
CREATE OR REPLACE TRIGGER TITLES_PK_SEQ_TRIG
BEFORE INSERT ON TITLES FOR EACH ROW
BEGIN
    SELECT TITLES_PK_SEQ.NEXTVAL INTO :NEW.TITLE_ID FROM DUAL;
END;
/

CREATE TABLE AUTHORS_TITLES(
    AUTHOR_ID NUMBER(10) NOT NULL,
    TITLE_ID NUMBER(10) NOT NULL,
    WHO_ADDED VARCHAR2(70) DEFAULT USER NOT NULL,
    WHEN_ADDED TIMESTAMP DEFAULT SYSDATE NOT NULL,
    WHO_LAST_MOD VARCHAR2(70) NULL,
    WHEN_LAST_MOD TIMESTAMP NULL,
    CONSTRAINT AUTHORS_TITLES_PK PRIMARY KEY (AUTHOR_ID, TITLE_ID),
    CONSTRAINT AUTHORS_TITLES_FK_1 FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID),
    CONSTRAINT AUTHORS_TITLES_FK_2 FOREIGN KEY (TITLE_ID) REFERENCES TITLES(TITLE_ID)
);

CREATE TABLE LOCATIONS(
    LOCATION_ID NUMBER(10) NOT NULL,
    CORRIDOR NUMBER(2) NOT NULL,
    RACK NUMBER(2) NOT NULL,
    SHELF NUMBER(2) NOT NULL,
    WHO_ADDED VARCHAR2(70) DEFAULT USER NOT NULL,
    WHEN_ADDED TIMESTAMP DEFAULT SYSDATE NOT NULL,
    WHO_LAST_MOD VARCHAR2(70) NULL,
    WHEN_LAST_MOD TIMESTAMP NULL,
    CONSTRAINT LOCATIONS_PK PRIMARY KEY (LOCATION_ID),
    CONSTRAINT LOCATIONS_CK_1 CHECK (CORRIDOR BETWEEN 1 AND 10),
    CONSTRAINT LOCATIONS_CK_2 CHECK (RACK BETWEEN 1 AND 15),
    CONSTRAINT LOCATIONS_CK_3 CHECK (SHELF BETWEEN 1 AND 8)
);
CREATE SEQUENCE LOCATIONS_PK_SEQ;
CREATE OR REPLACE TRIGGER LOCATIONS_PK_SEQ_TRIG
BEFORE INSERT ON LOCATIONS FOR EACH ROW
BEGIN
    SELECT LOCATIONS_PK_SEQ.NEXTVAL INTO :NEW.LOCATION_ID FROM DUAL;
END;
/

CREATE TABLE BOOKS(
    BOOK_ID NUMBER(10) NOT NULL,
    TITLE_ID NUMBER(10) NOT NULL,
    BORROW_STATE VARCHAR2(70) NOT NULL,
    LOCATION_ID NUMBER(10) NULL,
    BOOK_VALUE NUMBER(5, 2) NOT NULL,
    CONDITION NUMBER(1) NOT NULL,
    BUY_DATE DATE NOT NULL,
    WHO_ADDED VARCHAR2(70) DEFAULT USER NOT NULL,
    WHEN_ADDED TIMESTAMP DEFAULT SYSDATE NOT NULL,
    WHO_LAST_MOD VARCHAR2(70) NULL,
    WHEN_LAST_MOD TIMESTAMP NULL,
    CONSTRAINT BOOKS_PK PRIMARY KEY (BOOK_ID),
    CONSTRAINT BOOKS_FK_1 FOREIGN KEY (TITLE_ID) REFERENCES TITLES(TITLE_ID),
    CONSTRAINT BOOKS_FK_2 FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID),
    CONSTRAINT BOOKS_CK_1 CHECK (BORROW_STATE IN ('IN BORROW', 'IN STORAGE', 'LOST OR DESTROYED', 'STORAGE QUEUE')),
    CONSTRAINT BOOKS_CK_2 CHECK (BOOK_VALUE BETWEEN 0.01 AND 99999.99),
    CONSTRAINT BOOKS_CK_3 CHECK (CONDITION BETWEEN 1 AND 5),
    CONSTRAINT BOOKS_CK_4 CHECK (BUY_DATE >= DATE '2022-09-01')
);
CREATE SEQUENCE BOOKS_PK_SEQ;
CREATE OR REPLACE TRIGGER BOOKS_PK_SEQ_TRIG
BEFORE INSERT ON BOOKS FOR EACH ROW
BEGIN
    SELECT BOOKS_PK_SEQ.NEXTVAL INTO :NEW.BOOK_ID FROM DUAL;
END;
/